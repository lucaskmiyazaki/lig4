[{"/home/lucas/projects/ionic/react/templates/lig4/src/index.js":"1"},{"size":13984,"mtime":1613084698684,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"g7lxjo","/home/lucas/projects/ionic/react/templates/lig4/src/index.js",["7","8","9","10","11","12"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Confetti from 'react-confetti';\n\nvar numberRow = 7;\nvar numberSqr = 6;\n\n\nfunction setCookie(cname, cvalue, exdays) {\n  var d = new Date();\n  d.setTime(d.getTime() + (exdays*24*60*60*1000));\n  var expires = \"expires=\"+ d.toUTCString();\n  document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\n}\n\nfunction getCookie(cname) {\n  var name = cname + \"=\";\n  var decodedCookie = decodeURIComponent(document.cookie);\n  var ca = decodedCookie.split(';');\n  for(var i = 0; i <ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) == ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) == 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n}\n\nfunction HomeButton() {\n  return (\n    <button className=\"menu-button\" onClick={() => {\n      setCookie(\"mode\", \"menu\", 100)\n      window.location.href = window.location.href;\n    }}>\n      home\n    </button>\n  );\n}\n\nfunction RestartButton() {\n  return (\n    <button className=\"menu-button\" onClick={() => {\n      window.location.href = window.location.href;\n    }}>\n      restart\n    </button>\n  );\n}\n\nfunction Square(props) {\n  if (props.value === 1 && !props.highlight){\n    return (\n      <button className=\"square-p1\" onClick={props.onClick}>\n      </button>\n    );\n  }else if (props.value === 1 && props.highlight){\n    return (\n      <button className=\"square-p1-high\" onClick={props.onClick}>\n      </button>\n    );\n  }else if (props.value === 2 && !props.highlight){\n    return (\n      <button className=\"square-p2\" onClick={props.onClick}>\n      </button>\n    );\n  }else if (props.value === 2 && props.highlight){\n    return (\n      <button className=\"square-p2-high\" onClick={props.onClick}>\n      </button>\n    );\n  }else {\n    return (\n      <button className=\"square-blank\" onClick={props.onClick}>\n      </button>\n    );\n  }\n}\n\nclass Row extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      squares: new Array(numberSqr).fill(0),    \n      lastPlace: 0,\n    };\n  }\n\n  dropCoin(){\n    var stillFalling = false;\n    for (let index = numberSqr-1; index > 0; index--) {\n      if (this.state.squares[index - 1] !== 0 && this.state.squares[index] === 0){\n        let row = this.state.squares;\n        row[index] = row[index - 1];\n        row[index - 1] = 0;\n\n        this.setState({\n          squares: row,\n          lastPlace: index,\n        });\n        stillFalling = true;\n      }\n    }\n    if(stillFalling){\n      setTimeout(() => {this.dropCoin();}, 200)\n    }else{\n      this.props.onPlace(this.state.lastPlace);\n      this.setState({\n        lastPlace: 0,\n      });\n    }\n  }\n\n  handleSelection(){\n    let row = this.state.squares;\n    row[0] = this.props.whoIsNext;\n    this.props.onClick();\n    this.setState({\n      squares: row,\n    });\n    setTimeout(() => {this.dropCoin();}, 200);\n  }\n\n  handleClick(){\n    let row = this.state.squares;\n    if (this.props.canPlay && row[0] === 0){\n      this.handleSelection();\n    }\n  }\n\n  renderSquares(){\n    let element = [];\n    let highlight = false;\n\n    for (let index = 0; index < numberSqr; index++) {\n      if (this.props.highlightSqrs.includes(index)){\n        highlight = true;\n      }else{\n        highlight = false;\n      }\n      element.push(\n        <Square \n          value={this.state.squares[index]}\n          onClick={() => this.handleClick()}\n          key={index}\n          index={index}\n          highlight={highlight}\n        />\n        \n      );\n    }\n    return element;\n  }\n\n  //Todo arrumar pra handleSelection nao ficar dentro do render\n  render(){\n    if (this.props.nextPlay){\n      this.handleSelection();\n    }\n    return(\n      <div className=\"board-row\">\n        {this.renderSquares()}\n      </div>\n    );\n  }\n}\n\nclass MultiBoard extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      whoIsNext: 1,\n      canPlay:true,\n      rows: new Array(numberRow).fill().map(() => Array(numberSqr).fill(0)),\n      gameOver: false,\n      nextPlay: false,\n      lastRow: 0,\n      lastSqr: 0,\n      highlightPositions: [],\n      tie: false,\n    };\n  }\n\n  handleApiGame(gameOver, positions){\n    if (gameOver === \"tie\"){\n      this.setState({\n        gameOver: true,\n        tie: true\n      })\n    }else if (gameOver === false){\n      this.setState({\n        canPlay: true,\n        whoIsNext: (this.state.whoIsNext === 1? 2:1),\n      });\n    }else{\n      this.setState({\n        gameOver: true,\n        highlightPositions: positions,\n      });\n    }\n  }\n\n  postApiGame(lastRow, lastSqr){\n    fetch('http://localhost:5000/game', {\n      method: 'POST',\n      cache: \"no-cache\",\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify({board: this.state.rows, \n                            lastRow: lastRow, \n                            lastSqr: lastSqr, \n                            numberRow: numberRow, \n                            numberSqr: numberSqr\n                          })\n      }).then(response => response.json())\n        .then((response) => this.handleApiGame(response[\"gameOver\"], response[\"positions\"])\n        )\n        .catch(error => console.log(error));\n  }\n\n  handleGame(row, sqr){\n    let board = [...this.state.rows];\n    board[row][sqr] = this.state.whoIsNext;\n    this.setState({\n      rows: board,\n    });\n    this.postApiGame(row, sqr);\n  }\n\n  handleClick(){\n    this.setState({\n      canPlay: false,\n      nextPlay: false,\n    });\n  }\n\n  // ToDo arrumar pra Api do handleGame ser processado antes de onPlace\n  renderRows(){\n    let element = [];\n\n    for (let index = 0; index < numberRow; index++) {\n      let highlightSqrs = [];\n      for (let i = 0; i < this.state.highlightPositions.length; i++) {\n        if (index === this.state.highlightPositions[i][0]){\n          highlightSqrs.push(this.state.highlightPositions[i][1])\n        }\n      }\n\n      element.push(\n        <div className=\"board-row\">\n          <Row \n            whoIsNext={this.state.whoIsNext}\n            canPlay={this.state.canPlay}\n            nextPlay={this.state.nextPlay===index}\n            highlightSqrs={highlightSqrs}\n            onClick={() => this.handleClick()}\n            onPlace={(sqr) => this.handleGame(index, sqr)}\n            key={index}\n          />\n        </div>\n        \n      );\n    }\n    return element;\n  }\n\n  renderStatus(){\n    if (this.state.tie){\n      return(\n        <div className=\"status\">\n          tie  \n        </div>\n      );\n    }else if(this.state.gameOver){\n      return(\n        <div className=\"status\">\n        player {this.state.whoIsNext} wins  \n      </div>\n      );\n    }else{\n      return(\n        <div className=\"status\">\n          player {this.state.whoIsNext} turn  \n        </div>\n      );\n    }\n  }\n\n  renderConfetti(){\n    if(this.state.gameOver){\n      const { innerWidth: width, innerHeight: height } = window;\n      return(\n        <Confetti\n          width={width}\n          height={height}\n        />\n      )\n    }\n  }\n\n  render (){\n    return(\n      <div className=\"game-area\">\n        <div className=\"game-board\">\n          {this.renderStatus()}\n          {this.renderRows()}\n          {this.renderConfetti()}\n        </div>\n        <div className=\"game-buttons\">\n          <HomeButton />\n          <RestartButton />\n        </div>\n      </div>\n    )\n  }\n}\n\nclass SingleBoard extends MultiBoard{\n  constructor(props){\n    super(props);\n    this.state = {\n      ...this.state,\n    };\n  }\n\n  postApiOpponent(){\n    var level = getCookie(\"dificulty\");\n    var dificultyLevel;\n\n    if (level === \"easy\"){\n      dificultyLevel = 2;\n    }else if (level === \"medium\"){\n      dificultyLevel = 3;\n    }else{\n      dificultyLevel = 4;\n    }\n\n    fetch('http://localhost:5000/opponent', {\n      method: 'POST',\n      cache: \"no-cache\",\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify({board: this.state.rows, \n                            nextPlayer: this.state.whoIsNext, \n                            numberRow: numberRow, \n                            numberSqr: numberSqr,\n                            dificultyLevel: 4,\n                          })\n      }).then(response => response.json())\n        .then((response) => {\n          let nextPlay;\n\n          nextPlay = response[\"nextPlay\"];\n  \n          this.setState({\n            nextPlay: nextPlay,\n          });\n        })\n        .catch(error => console.log(error));\n  }\n\n  handleApiGame(gameover, positions){\n    if (gameover === \"tie\"){\n      this.setState({\n        gameOver: true,\n        tie: true,\n      })\n    }else if (gameover){\n      this.setState({\n        gameOver: true,\n        highlightPositions: positions,\n      });\n    }else{\n      if (this.state.whoIsNext === 1){\n        this.setState({\n          canPlay: false,\n          whoIsNext: 2,\n        });\n        this.postApiOpponent();\n      }else{\n        this.setState({\n          canPlay: true,\n          whoIsNext: 1,\n          nextPlay: false,\n        });\n      }\n    }\n  }\n\n\n  render (){\n    return(\n      <div className=\"game-area\">\n        <div className=\"game-board\">\n          {this.renderStatus()}\n          {this.renderRows()}\n          {this.renderConfetti()}\n        </div>\n        <div className=\"game-buttons\">\n          <HomeButton />\n          <RestartButton />\n        </div>\n      </div>\n    )\n  }\n}\n\nclass SelectBox extends React.Component{\n  constructor(props){\n    super(props);\n\n    let currentValue = getCookie(this.props.name);\n\n    this.state = {\n      optionNumber: currentValue===\"\"? 1:parseInt(currentValue),\n    };\n\n    this.handleLeftClick  = this.handleLeftClick.bind(this);\n    this.handleRightClick = this.handleRightClick.bind(this);\n  }\n\n  handleLeftClick(){\n    let nextValue;\n    if (this.state.optionNumber <= 0){\n      nextValue = this.props.options.length - 1;\n    }else{\n      nextValue = this.state.optionNumber - 1;\n    }\n    this.handleChange(nextValue);\n  }\n\n  handleRightClick(){\n    let nextValue;\n    if (this.state.optionNumber >= this.props.options.length - 1){\n      nextValue = 0;\n    }else{\n      nextValue = this.state.optionNumber + 1;\n    }\n    this.handleChange(nextValue);\n  }\n\n  handleChange(nextValue){\n    this.setState({\n      optionNumber: nextValue,\n    });\n    setCookie(this.props.name, nextValue, 100);\n  }\n\n  render(){\n    let currentValue = this.props.options[this.state.optionNumber];\n\n    return(\n      <div className=\"select-box\" name={this.props.name}>\n        <div className=\"category-to-select\">\n          {this.props.name}\n        </div>\n        <button className=\"left-select-button\" onClick={this.handleLeftClick}></button>\n        <div className=\"selected-item\">\n          {currentValue}\n        </div>\n        <button className=\"right-select-button\" onClick={this.handleRightClick}></button>\n      </div>\n    );\n  }\n}\n\nclass ConfigurationMenu extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return(\n      <div className=\"config-menu\">\n        <SelectBox \n          name=\"dificulty\"\n          options={[\"easy\", \"medium\", \"hard\"]}\n        />\n        <SelectBox \n          name=\"board-style\"\n          options={[\"short\", \"standard\", \"long\"]}\n        />\n        <SelectBox \n          name=\"who-is-first?\"\n          options={[\"cpu\", \"me\"]}\n        />\n\n        <HomeButton />\n      </div>\n    );\n  }\n}\n\nclass Menu extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {};\n  }\n\n  render(){\n    return(\n      <div className=\"main-menu\">\n        <button className=\"menu-button\" onClick={this.props.onSingClick}>\n          Single Player\n        </button>\n        <button className=\"menu-button\" onClick={this.props.onMultClick}>\n          Multiplayer Player\n        </button>\n        <button className=\"menu-button\" onClick={this.props.onConfClick}>\n          Configurations\n        </button>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component{\n  constructor(props){\n    super(props);\n\n    let currentMode = getCookie(\"mode\");\n\n    this.state = {\n      mode: currentMode===\"\"? \"menu\":currentMode,\n      dificultyLevel: \"hard\",\n      npcTurn: 2,\n      numberRow: 7,\n      numberSqr: 6,\n      lineLengthToWin: 4,\n    };\n  }\n\n  handleSingClick() {\n    setCookie(\"mode\", \"single\", 100)\n\n    this.setState({\n      mode: \"single\",\n    });\n  }\n\n  handleMultClick() {\n    setCookie(\"mode\", \"multi\", 100)\n\n    this.setState({\n      mode: \"multi\",\n    });\n  }\n\n  handleConfClick() {\n    setCookie(\"mode\", \"config\", 100)\n    \n    this.setState({\n      mode: \"config\",\n    });\n  }\n\n\n  renderTitle(){\n    return(\n      <div className=\"title\">\n        <div className='title1'>C</div>\n        <div className='title2'>o</div>\n        <div className='title3'>n</div>\n        <div className='title4'>n</div>\n        <div className='title5'>e</div>\n        <div className='title6'>c</div>\n        <div className='title7'>t </div>\n        <div className='title8'>4</div>\n      </div>\n    );\n  }\n\n  renderBody() {\n    switch (this.state.mode){\n      case \"menu\":\n        return(\n        <Menu \n          onSingClick={() => this.handleSingClick()}\n          onMultClick={() => this.handleMultClick()}\n          onConfClick={() => this.handleConfClick()}\n        />\n        );\n      case \"single\":\n        return(\n          <SingleBoard />\n        );\n      case \"multi\":\n        return(\n          <MultiBoard />\n        );\n      case \"config\":\n        return(\n          <ConfigurationMenu />\n        );\n      default:\n        return(\n          <Menu \n            onClick={() => this.handleSingClick()}\n            onMultClick={() => this.handleMultClick()}\n            onConfClick={() => this.handleConfClick()}\n          />\n        );\n    }\n  }\n\n  render (){\n    return(\n      <div className=\"game\">\n        {this.renderTitle()}\n        {this.renderBody()}\n      </div>\n    );\n  }\n}\n\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);",{"ruleId":"13","severity":1,"message":"14","line":23,"column":24,"nodeType":"15","messageId":"16","endLine":23,"endColumn":26},{"ruleId":"13","severity":1,"message":"14","line":26,"column":25,"nodeType":"15","messageId":"16","endLine":26,"endColumn":27},{"ruleId":"17","severity":1,"message":"18","line":37,"column":30,"nodeType":"19","messageId":"20","endLine":37,"endColumn":50},{"ruleId":"17","severity":1,"message":"18","line":47,"column":30,"nodeType":"19","messageId":"20","endLine":47,"endColumn":50},{"ruleId":"21","severity":1,"message":"22","line":339,"column":7,"nodeType":"23","messageId":"24","endLine":339,"endColumn":21},{"ruleId":"25","severity":1,"message":"26","line":473,"column":3,"nodeType":"27","messageId":"28","endLine":475,"endColumn":4},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-self-assign","'window.location.href' is assigned to itself.","MemberExpression","selfAssignment","no-unused-vars","'dificultyLevel' is assigned a value but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor"]